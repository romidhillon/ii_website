// https://docs.djangoproject.com/en/4.1/topics/db/queries/

// FILTER
// This code filters all objects in the table where the title is DBMV but only returns the code for those objects
example = Project.objects.filter (title = DBMV).only(code)

// FILTER WITH CONDITIONAL 
// filters all objects in the Invoice table where the value is greater than 2000 and the value is less than 5000
example = Invoice.objects.filter(value__gt = 2000) & Project.objects.filter(value__lt = 5000)

// FILTER WITH CONDITIONAL 
// filters all objects in the Invoice table where the value is less than or equal to 2000 and the value is greater than or equal to 5000
example = Invoice.objects.filter(value__lte = 2000) | Project.objects.filter(value__gte = 5000)

// SQL QUERIES WITH THE USE OF RAW
// you can perform raw SQL queries within Django. The below selects all objects in the table and then returns the value
invoice = Invoice.objects.raw("SELECT * FROM ii_app_invoice")
for p in invoice : print(p.value)

// SQL QUERIES WITH THE USE OF CURSOR 
// another way to perform SQL queries on the tables. This will give a count of objects in the invoice table
cursor = connection.cursor()
cursor.execute("SELECT count(*) FROM ii_app_invoice")
r = cursor.fetchone()
print(r)

// SQL QUERIES WITH THE USE OF CURSOR 
// another way to perform SQL queries on the tables. This will select all objects in the table
cursor = connection.cursor()
cursor.execute("SELECT * FROM ii_app_invoice")
r = cursor.fetchall()
print(r)

// AGGREGATIONS
//we can perform aggregations by importing sum in the shell and doing. 
//this will give the sum of the column which is named value.
from django.db.models import Sum, Max,Min,Avg
Invoice.objects.all().aggregate(Sum('value'))

// AGGREGATIONS
//if we want to change the name of the key for sum we can do the following
Invoice.objects.all().aggregate(new_name = Sum('value'))

// AGGREGATIONS
// we can also calculate the max, min, or average, 
Invoice.objects.all().aggregate(new_name = Max('value'))

// CONDITIONAL STATEMENTS
//get all invoice end dates that are greater than or equal to todays date  
Invoice.objects.filter(end__gte=datetime.date.today())

// ORDER BY
//you can order objects in a table 
Invoice.objects.order_by('start')

// F STATEMENT 
// If you want to compare the value of a model field with another model field, you can use F
// The below statement checks for objects where the number of comments column is greater than number of pingbacks 
from django.db.models import F
Entry.objects.filter(number_of_comments__gt=F('number_of_pingbacks'))

// F STATEMENT SPANNING RELATIONSHIPS 
Entry.objects.filter(authors__name=F('blog__name'))

// F STATEMENT SPANNING RELATIONSHIPS 
// to find all Entry objects published in the same year as they were last modified
Entry.objects.filter(pub_date__year=F('mod_date__year'))

// Q OBJECTS 
// Used to execute complex queries where multiple AND / OR operators are used
Q(question__startswith='Who') | Q(question__startswith='What')

// COUNT AGGREGATION
Book.objects.count()

//AVG AGGREGATION 
Book.objects.aggregate(Avg('price'))

// AGGREGATION - DIFFERENCE BETWEEN HIGHEST PRICE BOOK AND AVERAGE PRICE OF ALL BOOKS 
// Difference between highest price book and average price of all books 
Book.objects.aggregate(price_diff=Max('price', output_field=FloatField()) - Avg('price'))

// ANNOTATE 
// Annotate returns a new column or queryset which then holds the values of the query
// Each publisher, each with a count of books as a "num_books" attribute.
from django.db.models import Count
pubs = Publisher.objects.annotate(num_books=Count('book'))

// FILTER 
// Each publisher, with a separate count of books with a rating above and below 5
from django.db.models import Q
above_5 = Count('book', filter=Q(book__rating__gt=5))

// ANNOTATE
// The top 5 publishers, in order by number of books.
pubs = Publisher.objects.annotate(num_books=Count('book')).order_by('-num_books')[:5]

// REVERSE FOREIGN KEY LOOKUP - MODEL_NAME_SET 
// assignment.booking_set.filter(day__lt = end, day__gte = start) 


// could write a function that reads in a csv file and inserts the data into the database
// once i get access to SAP, we can get the export to CSV 
// This may be a more cost effective method than connecting to SAP API business hub